version: '3.3'

# Define services
services:
  postgres-db:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    networks:
      - proxy
    ports:
      - 5432:5432
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-ahmet.kayar@gmail.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - pgadmin:/root/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - proxy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.boyutyazilim.com`)"
      - "traefik.http.routers.pgadmin.entrypoints=https"
      - "traefik.http.routers.pgadmin.tls.certresolver=http"
      - "traefik.docker.network=proxy"
  # App backend service
  api-server:
    # Configuration for building the docker image for the backend service
    image: boyutyazilim:v1
    restart: always
    depends_on:
      - postgres-db
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - proxy
    ports:
      - 5000:5000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-server.rule=Host(`www.boyutyazilim.com`)"
      - "traefik.http.routers.api-server.entrypoints=https"
      - "traefik.http.routers.api-server.tls.certresolver=http"
      - "traefik.docker.network=proxy"

# Networks to be created to facilitate communication between containers
networks:
  proxy:
    external: true

volumes:
  postgres:
  pgadmin:
